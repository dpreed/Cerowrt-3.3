From 21003354801e58662bf9553c60e60cf5d5d17464 Mon Sep 17 00:00:00 2001
From: Dave Taht <dave.taht@bufferbloat.net>
Date: Wed, 18 Apr 2012 12:28:08 -0700
Subject: [PATCH 4/4] Restore optional SFQ Head of Queue behavior

This makes the Head of Queue (hoq) behavior of
commit cc34eb672eedb5ff248ac3bf9971a76f141fd141, enabled,
but optional. It can be disabled with hoq=0.

The circumstances under which this bug occurs are dependent on
htb being used to manage hundreds of bins, with short queues.

http://www.bufferbloat.net/issues/332

In my case, htb has 2-3 bins, deep queues, and red, turned on.

These inject fundamental randomness so triggering this bug will
be very difficult...

And the benefit of queue to head, is enormous.

Without running it, at least for a while, in cerowrt, I'm not
going to gain insight into why it happens and how it can be mitigated.

My principal thought is that htb should peek, rather than pull, packets.
That would reduce the window where we're holding onto stuff to
an infintesimal amount.

Either way, bad behavior can come from udp flooding and other sources
with the default qdiscs, which is solved by sfq in the first place,
so instituting a new bad behavior while fixing another, doesn't bother
me so much.

If it doesn't work out, I'll disable it by default in the patch.

This is a major conflict between doing science (making mainline
linux 3.3 and cerowrt directly comparable) and advancing the state
of the art, and I've wrestled with it for weeks.
---
 net/sched/sch_sfq.c |    9 ++++++++-
 1 files changed, 8 insertions(+), 1 deletions(-)

diff --git a/net/sched/sch_sfq.c b/net/sched/sch_sfq.c
index 02a21ab..16f6785 100644
--- a/net/sched/sch_sfq.c
+++ b/net/sched/sch_sfq.c
@@ -27,6 +27,12 @@
 #include <net/red.h>
 
 
+#define HOQ_ON 1
+unsigned int hoq = HOQ_ON ;
+module_param(hoq, uint, 0644);
+MODULE_PARM_DESC(hoq,
+        "Enable head of queues optimization. Possibly unstable.");
+
 /*	Stochastic Fairness Queuing algorithm.
 	=======================================
 
@@ -469,6 +475,7 @@ enqueue:
 	if (slot->qlen == 1) {		/* The flow is new */
 		if (q->tail == NULL) {	/* It is the first flow */
 			slot->next = x;
+		if(hoq == HOQ_ON) q->tail = slot;
 		} else {
 			slot->next = q->tail->next;
 			q->tail->next = x;
@@ -477,7 +484,7 @@ enqueue:
 		 * This might sound unfair for a new flow to wait after old ones,
 		 * but we could endup servicing new flows only, and freeze old ones.
 		 */
-		q->tail = slot;
+		if(hoq != HOQ_ON) q->tail = slot;
 		/* We could use a bigger initial quantum for new flows */
 		slot->allot = q->scaled_quantum;
 	}
-- 
1.7.5.4

