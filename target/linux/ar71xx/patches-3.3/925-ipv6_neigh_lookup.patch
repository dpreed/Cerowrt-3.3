diff --git a/include/net/ndisc.h b/include/net/ndisc.h
index e3133c2..f9a96fe 100644
--- a/include/net/ndisc.h
+++ b/include/net/ndisc.h
@@ -83,10 +83,10 @@ static inline u32 ndisc_hashfn(const void *pkey, const struct net_device *dev, _
 {
 	const u32 *p32 = pkey;
 
-	return (((p32[0] ^ dev->ifindex) * hash_rnd[0]) +
-		(p32[1] * hash_rnd[1]) +
-		(p32[2] * hash_rnd[2]) +
-		(p32[3] * hash_rnd[3]));
+	return (((__get_unaligned_cpu32(&p32[0]) ^ dev->ifindex) * hash_rnd[0]) +
+		(__get_unaligned_cpu32(&p32[1]) * hash_rnd[1]) +
+		(__get_unaligned_cpu32(&p32[2]) * hash_rnd[2]) +
+		(__get_unaligned_cpu32(&p32[3]) * hash_rnd[3]));
 }
 
 static inline struct neighbour *__ipv6_neigh_lookup(struct neigh_table *tbl, struct net_device *dev, const void *pkey)
@@ -104,8 +104,8 @@ static inline struct neighbour *__ipv6_neigh_lookup(struct neigh_table *tbl, str
 	     n = rcu_dereference_bh(n->next)) {
 		u32 *n32 = (u32 *) n->primary_key;
 		if (n->dev == dev &&
-		    ((n32[0] ^ p32[0]) | (n32[1] ^ p32[1]) |
-		     (n32[2] ^ p32[2]) | (n32[3] ^ p32[3])) == 0) {
+		    ((n32[0] ^ __get_unaligned_cpu32(&p32[0])) | (n32[1] ^ __get_unaligned_cpu32(&p32[1])) |
+		     (n32[2] ^ __get_unaligned_cpu32(&p32[2])) | (n32[3] ^ __get_unaligned_cpu32(&p32[3]))) == 0) {
 			if (!atomic_inc_not_zero(&n->refcnt))
 				n = NULL;
 			break;
